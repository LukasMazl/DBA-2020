/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing IotdevicecontrollerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class IotdevicecontrollerApiTests
    {
        private IotdevicecontrollerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IotdevicecontrollerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IotdevicecontrollerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IotdevicecontrollerApi
            //Assert.IsInstanceOfType(typeof(IotdevicecontrollerApi), instance, "instance is a IotdevicecontrollerApi");
        }

        
        /// <summary>
        /// Test CreateDeviceUsingPOST
        /// </summary>
        [Test]
        public void CreateDeviceUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDeviceDTO createDeviceDTO = null;
            //var response = instance.CreateDeviceUsingPOST(createDeviceDTO);
            //Assert.IsInstanceOf<CreateDeviceResponse> (response, "response is CreateDeviceResponse");
        }
        
        /// <summary>
        /// Test DeleteDeviceUsingPOST
        /// </summary>
        [Test]
        public void DeleteDeviceUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serialNumber = null;
            //var response = instance.DeleteDeviceUsingPOST(serialNumber);
            //Assert.IsInstanceOf<DeleteDeviceResponse> (response, "response is DeleteDeviceResponse");
        }
        
        /// <summary>
        /// Test GetAllFreeDeviceUsingPOST
        /// </summary>
        [Test]
        public void GetAllFreeDeviceUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllFreeDeviceUsingPOST();
            //Assert.IsInstanceOf<AllFreeDeviceDTO> (response, "response is AllFreeDeviceDTO");
        }
        
        /// <summary>
        /// Test GetDeviceConfigurationUsingPOST
        /// </summary>
        [Test]
        public void GetDeviceConfigurationUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serialNumber = null;
            //var response = instance.GetDeviceConfigurationUsingPOST(serialNumber);
            //Assert.IsInstanceOf<DeviceConfigurationDTO> (response, "response is DeviceConfigurationDTO");
        }
        
        /// <summary>
        /// Test RecordNewStateUsingPOST
        /// </summary>
        [Test]
        public void RecordNewStateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecordMachineStateDTO recordMachineStateDTO = null;
            //var response = instance.RecordNewStateUsingPOST(recordMachineStateDTO);
            //Assert.IsInstanceOf<RecordNewStateResponse> (response, "response is RecordNewStateResponse");
        }
        
        /// <summary>
        /// Test SetDeviceConfigurationUsingPOST
        /// </summary>
        [Test]
        public void SetDeviceConfigurationUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewDeviceConfigurationDTO newDeviceConfigurationDTO = null;
            //string serialNumber = null;
            //var response = instance.SetDeviceConfigurationUsingPOST(newDeviceConfigurationDTO, serialNumber);
            //Assert.IsInstanceOf<DeviceConfigurationResponse> (response, "response is DeviceConfigurationResponse");
        }
        
        /// <summary>
        /// Test TakeDeviceUsingPOST
        /// </summary>
        [Test]
        public void TakeDeviceUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TakeDeviceDTO takeDeviceDTO = null;
            //var response = instance.TakeDeviceUsingPOST(takeDeviceDTO);
            //Assert.IsInstanceOf<TakeDeviceResponse> (response, "response is TakeDeviceResponse");
        }
        
        /// <summary>
        /// Test UpdateDeviceUsingPOST
        /// </summary>
        [Test]
        public void UpdateDeviceUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serialNumber = null;
            //UpdateDeviceDTO updateDeviceDTO = null;
            //var response = instance.UpdateDeviceUsingPOST(serialNumber, updateDeviceDTO);
            //Assert.IsInstanceOf<UpdateDeviceResponse> (response, "response is UpdateDeviceResponse");
        }
        
    }

}
