/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EntityModelDeviceEntity
    /// </summary>
    [DataContract]
    public partial class EntityModelDeviceEntity :  IEquatable<EntityModelDeviceEntity>
    {
        /// <summary>
        /// Gets or Sets DeviceStateEntity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeviceStateEntityEnum
        {
            
            /// <summary>
            /// Enum STOP for "STOP"
            /// </summary>
            [EnumMember(Value = "STOP")]
            STOP,
            
            /// <summary>
            /// Enum RUNNING for "RUNNING"
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING,
            
            /// <summary>
            /// Enum WAITING for "WAITING"
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING
        }

        /// <summary>
        /// Gets or Sets DeviceStateEntity
        /// </summary>
        [DataMember(Name="deviceStateEntity", EmitDefaultValue=false)]
        public DeviceStateEntityEnum? DeviceStateEntity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityModelDeviceEntity" /> class.
        /// </summary>
        /// <param name="Created">Created.</param>
        /// <param name="DeviceConfigurationEntity">DeviceConfigurationEntity.</param>
        /// <param name="DeviceDescription">DeviceDescription.</param>
        /// <param name="DeviceStateEntity">DeviceStateEntity.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Links">Links.</param>
        /// <param name="MachineEntity">MachineEntity.</param>
        /// <param name="SerialNumber">SerialNumber.</param>
        public EntityModelDeviceEntity(DateTime? Created = null, DeviceConfigurationEntity DeviceConfigurationEntity = null, string DeviceDescription = null, DeviceStateEntityEnum? DeviceStateEntity = null, long? Id = null, Links Links = null, MachineEntity MachineEntity = null, string SerialNumber = null)
        {
            this.Created = Created;
            this.DeviceConfigurationEntity = DeviceConfigurationEntity;
            this.DeviceDescription = DeviceDescription;
            this.DeviceStateEntity = DeviceStateEntity;
            this.Id = Id;
            this.Links = Links;
            this.MachineEntity = MachineEntity;
            this.SerialNumber = SerialNumber;
        }
        
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets DeviceConfigurationEntity
        /// </summary>
        [DataMember(Name="deviceConfigurationEntity", EmitDefaultValue=false)]
        public DeviceConfigurationEntity DeviceConfigurationEntity { get; set; }
        /// <summary>
        /// Gets or Sets DeviceDescription
        /// </summary>
        [DataMember(Name="deviceDescription", EmitDefaultValue=false)]
        public string DeviceDescription { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links Links { get; set; }
        /// <summary>
        /// Gets or Sets MachineEntity
        /// </summary>
        [DataMember(Name="machineEntity", EmitDefaultValue=false)]
        public MachineEntity MachineEntity { get; set; }
        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityModelDeviceEntity {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DeviceConfigurationEntity: ").Append(DeviceConfigurationEntity).Append("\n");
            sb.Append("  DeviceDescription: ").Append(DeviceDescription).Append("\n");
            sb.Append("  DeviceStateEntity: ").Append(DeviceStateEntity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  MachineEntity: ").Append(MachineEntity).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EntityModelDeviceEntity);
        }

        /// <summary>
        /// Returns true if EntityModelDeviceEntity instances are equal
        /// </summary>
        /// <param name="other">Instance of EntityModelDeviceEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityModelDeviceEntity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.DeviceConfigurationEntity == other.DeviceConfigurationEntity ||
                    this.DeviceConfigurationEntity != null &&
                    this.DeviceConfigurationEntity.Equals(other.DeviceConfigurationEntity)
                ) && 
                (
                    this.DeviceDescription == other.DeviceDescription ||
                    this.DeviceDescription != null &&
                    this.DeviceDescription.Equals(other.DeviceDescription)
                ) && 
                (
                    this.DeviceStateEntity == other.DeviceStateEntity ||
                    this.DeviceStateEntity != null &&
                    this.DeviceStateEntity.Equals(other.DeviceStateEntity)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.MachineEntity == other.MachineEntity ||
                    this.MachineEntity != null &&
                    this.MachineEntity.Equals(other.MachineEntity)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.DeviceConfigurationEntity != null)
                    hash = hash * 59 + this.DeviceConfigurationEntity.GetHashCode();
                if (this.DeviceDescription != null)
                    hash = hash * 59 + this.DeviceDescription.GetHashCode();
                if (this.DeviceStateEntity != null)
                    hash = hash * 59 + this.DeviceStateEntity.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.MachineEntity != null)
                    hash = hash * 59 + this.MachineEntity.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                return hash;
            }
        }
    }

}
