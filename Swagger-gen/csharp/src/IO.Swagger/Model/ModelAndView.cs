/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModelAndView
    /// </summary>
    [DataContract]
    public partial class ModelAndView :  IEquatable<ModelAndView>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CONTINUE for "CONTINUE"
            /// </summary>
            [EnumMember(Value = "CONTINUE")]
            CONTINUE,
            
            /// <summary>
            /// Enum SWITCHINGPROTOCOLS for "SWITCHING_PROTOCOLS"
            /// </summary>
            [EnumMember(Value = "SWITCHING_PROTOCOLS")]
            SWITCHINGPROTOCOLS,
            
            /// <summary>
            /// Enum PROCESSING for "PROCESSING"
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING,
            
            /// <summary>
            /// Enum CHECKPOINT for "CHECKPOINT"
            /// </summary>
            [EnumMember(Value = "CHECKPOINT")]
            CHECKPOINT,
            
            /// <summary>
            /// Enum OK for "OK"
            /// </summary>
            [EnumMember(Value = "OK")]
            OK,
            
            /// <summary>
            /// Enum CREATED for "CREATED"
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED,
            
            /// <summary>
            /// Enum ACCEPTED for "ACCEPTED"
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED,
            
            /// <summary>
            /// Enum NONAUTHORITATIVEINFORMATION for "NON_AUTHORITATIVE_INFORMATION"
            /// </summary>
            [EnumMember(Value = "NON_AUTHORITATIVE_INFORMATION")]
            NONAUTHORITATIVEINFORMATION,
            
            /// <summary>
            /// Enum NOCONTENT for "NO_CONTENT"
            /// </summary>
            [EnumMember(Value = "NO_CONTENT")]
            NOCONTENT,
            
            /// <summary>
            /// Enum RESETCONTENT for "RESET_CONTENT"
            /// </summary>
            [EnumMember(Value = "RESET_CONTENT")]
            RESETCONTENT,
            
            /// <summary>
            /// Enum PARTIALCONTENT for "PARTIAL_CONTENT"
            /// </summary>
            [EnumMember(Value = "PARTIAL_CONTENT")]
            PARTIALCONTENT,
            
            /// <summary>
            /// Enum MULTISTATUS for "MULTI_STATUS"
            /// </summary>
            [EnumMember(Value = "MULTI_STATUS")]
            MULTISTATUS,
            
            /// <summary>
            /// Enum ALREADYREPORTED for "ALREADY_REPORTED"
            /// </summary>
            [EnumMember(Value = "ALREADY_REPORTED")]
            ALREADYREPORTED,
            
            /// <summary>
            /// Enum IMUSED for "IM_USED"
            /// </summary>
            [EnumMember(Value = "IM_USED")]
            IMUSED,
            
            /// <summary>
            /// Enum MULTIPLECHOICES for "MULTIPLE_CHOICES"
            /// </summary>
            [EnumMember(Value = "MULTIPLE_CHOICES")]
            MULTIPLECHOICES,
            
            /// <summary>
            /// Enum MOVEDPERMANENTLY for "MOVED_PERMANENTLY"
            /// </summary>
            [EnumMember(Value = "MOVED_PERMANENTLY")]
            MOVEDPERMANENTLY,
            
            /// <summary>
            /// Enum FOUND for "FOUND"
            /// </summary>
            [EnumMember(Value = "FOUND")]
            FOUND,
            
            /// <summary>
            /// Enum MOVEDTEMPORARILY for "MOVED_TEMPORARILY"
            /// </summary>
            [EnumMember(Value = "MOVED_TEMPORARILY")]
            MOVEDTEMPORARILY,
            
            /// <summary>
            /// Enum SEEOTHER for "SEE_OTHER"
            /// </summary>
            [EnumMember(Value = "SEE_OTHER")]
            SEEOTHER,
            
            /// <summary>
            /// Enum NOTMODIFIED for "NOT_MODIFIED"
            /// </summary>
            [EnumMember(Value = "NOT_MODIFIED")]
            NOTMODIFIED,
            
            /// <summary>
            /// Enum USEPROXY for "USE_PROXY"
            /// </summary>
            [EnumMember(Value = "USE_PROXY")]
            USEPROXY,
            
            /// <summary>
            /// Enum TEMPORARYREDIRECT for "TEMPORARY_REDIRECT"
            /// </summary>
            [EnumMember(Value = "TEMPORARY_REDIRECT")]
            TEMPORARYREDIRECT,
            
            /// <summary>
            /// Enum PERMANENTREDIRECT for "PERMANENT_REDIRECT"
            /// </summary>
            [EnumMember(Value = "PERMANENT_REDIRECT")]
            PERMANENTREDIRECT,
            
            /// <summary>
            /// Enum BADREQUEST for "BAD_REQUEST"
            /// </summary>
            [EnumMember(Value = "BAD_REQUEST")]
            BADREQUEST,
            
            /// <summary>
            /// Enum UNAUTHORIZED for "UNAUTHORIZED"
            /// </summary>
            [EnumMember(Value = "UNAUTHORIZED")]
            UNAUTHORIZED,
            
            /// <summary>
            /// Enum PAYMENTREQUIRED for "PAYMENT_REQUIRED"
            /// </summary>
            [EnumMember(Value = "PAYMENT_REQUIRED")]
            PAYMENTREQUIRED,
            
            /// <summary>
            /// Enum FORBIDDEN for "FORBIDDEN"
            /// </summary>
            [EnumMember(Value = "FORBIDDEN")]
            FORBIDDEN,
            
            /// <summary>
            /// Enum NOTFOUND for "NOT_FOUND"
            /// </summary>
            [EnumMember(Value = "NOT_FOUND")]
            NOTFOUND,
            
            /// <summary>
            /// Enum METHODNOTALLOWED for "METHOD_NOT_ALLOWED"
            /// </summary>
            [EnumMember(Value = "METHOD_NOT_ALLOWED")]
            METHODNOTALLOWED,
            
            /// <summary>
            /// Enum NOTACCEPTABLE for "NOT_ACCEPTABLE"
            /// </summary>
            [EnumMember(Value = "NOT_ACCEPTABLE")]
            NOTACCEPTABLE,
            
            /// <summary>
            /// Enum PROXYAUTHENTICATIONREQUIRED for "PROXY_AUTHENTICATION_REQUIRED"
            /// </summary>
            [EnumMember(Value = "PROXY_AUTHENTICATION_REQUIRED")]
            PROXYAUTHENTICATIONREQUIRED,
            
            /// <summary>
            /// Enum REQUESTTIMEOUT for "REQUEST_TIMEOUT"
            /// </summary>
            [EnumMember(Value = "REQUEST_TIMEOUT")]
            REQUESTTIMEOUT,
            
            /// <summary>
            /// Enum CONFLICT for "CONFLICT"
            /// </summary>
            [EnumMember(Value = "CONFLICT")]
            CONFLICT,
            
            /// <summary>
            /// Enum GONE for "GONE"
            /// </summary>
            [EnumMember(Value = "GONE")]
            GONE,
            
            /// <summary>
            /// Enum LENGTHREQUIRED for "LENGTH_REQUIRED"
            /// </summary>
            [EnumMember(Value = "LENGTH_REQUIRED")]
            LENGTHREQUIRED,
            
            /// <summary>
            /// Enum PRECONDITIONFAILED for "PRECONDITION_FAILED"
            /// </summary>
            [EnumMember(Value = "PRECONDITION_FAILED")]
            PRECONDITIONFAILED,
            
            /// <summary>
            /// Enum PAYLOADTOOLARGE for "PAYLOAD_TOO_LARGE"
            /// </summary>
            [EnumMember(Value = "PAYLOAD_TOO_LARGE")]
            PAYLOADTOOLARGE,
            
            /// <summary>
            /// Enum REQUESTENTITYTOOLARGE for "REQUEST_ENTITY_TOO_LARGE"
            /// </summary>
            [EnumMember(Value = "REQUEST_ENTITY_TOO_LARGE")]
            REQUESTENTITYTOOLARGE,
            
            /// <summary>
            /// Enum URITOOLONG for "URI_TOO_LONG"
            /// </summary>
            [EnumMember(Value = "URI_TOO_LONG")]
            URITOOLONG,
            
            /// <summary>
            /// Enum REQUESTURITOOLONG for "REQUEST_URI_TOO_LONG"
            /// </summary>
            [EnumMember(Value = "REQUEST_URI_TOO_LONG")]
            REQUESTURITOOLONG,
            
            /// <summary>
            /// Enum UNSUPPORTEDMEDIATYPE for "UNSUPPORTED_MEDIA_TYPE"
            /// </summary>
            [EnumMember(Value = "UNSUPPORTED_MEDIA_TYPE")]
            UNSUPPORTEDMEDIATYPE,
            
            /// <summary>
            /// Enum REQUESTEDRANGENOTSATISFIABLE for "REQUESTED_RANGE_NOT_SATISFIABLE"
            /// </summary>
            [EnumMember(Value = "REQUESTED_RANGE_NOT_SATISFIABLE")]
            REQUESTEDRANGENOTSATISFIABLE,
            
            /// <summary>
            /// Enum EXPECTATIONFAILED for "EXPECTATION_FAILED"
            /// </summary>
            [EnumMember(Value = "EXPECTATION_FAILED")]
            EXPECTATIONFAILED,
            
            /// <summary>
            /// Enum IAMATEAPOT for "I_AM_A_TEAPOT"
            /// </summary>
            [EnumMember(Value = "I_AM_A_TEAPOT")]
            IAMATEAPOT,
            
            /// <summary>
            /// Enum INSUFFICIENTSPACEONRESOURCE for "INSUFFICIENT_SPACE_ON_RESOURCE"
            /// </summary>
            [EnumMember(Value = "INSUFFICIENT_SPACE_ON_RESOURCE")]
            INSUFFICIENTSPACEONRESOURCE,
            
            /// <summary>
            /// Enum METHODFAILURE for "METHOD_FAILURE"
            /// </summary>
            [EnumMember(Value = "METHOD_FAILURE")]
            METHODFAILURE,
            
            /// <summary>
            /// Enum DESTINATIONLOCKED for "DESTINATION_LOCKED"
            /// </summary>
            [EnumMember(Value = "DESTINATION_LOCKED")]
            DESTINATIONLOCKED,
            
            /// <summary>
            /// Enum UNPROCESSABLEENTITY for "UNPROCESSABLE_ENTITY"
            /// </summary>
            [EnumMember(Value = "UNPROCESSABLE_ENTITY")]
            UNPROCESSABLEENTITY,
            
            /// <summary>
            /// Enum LOCKED for "LOCKED"
            /// </summary>
            [EnumMember(Value = "LOCKED")]
            LOCKED,
            
            /// <summary>
            /// Enum FAILEDDEPENDENCY for "FAILED_DEPENDENCY"
            /// </summary>
            [EnumMember(Value = "FAILED_DEPENDENCY")]
            FAILEDDEPENDENCY,
            
            /// <summary>
            /// Enum TOOEARLY for "TOO_EARLY"
            /// </summary>
            [EnumMember(Value = "TOO_EARLY")]
            TOOEARLY,
            
            /// <summary>
            /// Enum UPGRADEREQUIRED for "UPGRADE_REQUIRED"
            /// </summary>
            [EnumMember(Value = "UPGRADE_REQUIRED")]
            UPGRADEREQUIRED,
            
            /// <summary>
            /// Enum PRECONDITIONREQUIRED for "PRECONDITION_REQUIRED"
            /// </summary>
            [EnumMember(Value = "PRECONDITION_REQUIRED")]
            PRECONDITIONREQUIRED,
            
            /// <summary>
            /// Enum TOOMANYREQUESTS for "TOO_MANY_REQUESTS"
            /// </summary>
            [EnumMember(Value = "TOO_MANY_REQUESTS")]
            TOOMANYREQUESTS,
            
            /// <summary>
            /// Enum REQUESTHEADERFIELDSTOOLARGE for "REQUEST_HEADER_FIELDS_TOO_LARGE"
            /// </summary>
            [EnumMember(Value = "REQUEST_HEADER_FIELDS_TOO_LARGE")]
            REQUESTHEADERFIELDSTOOLARGE,
            
            /// <summary>
            /// Enum UNAVAILABLEFORLEGALREASONS for "UNAVAILABLE_FOR_LEGAL_REASONS"
            /// </summary>
            [EnumMember(Value = "UNAVAILABLE_FOR_LEGAL_REASONS")]
            UNAVAILABLEFORLEGALREASONS,
            
            /// <summary>
            /// Enum INTERNALSERVERERROR for "INTERNAL_SERVER_ERROR"
            /// </summary>
            [EnumMember(Value = "INTERNAL_SERVER_ERROR")]
            INTERNALSERVERERROR,
            
            /// <summary>
            /// Enum NOTIMPLEMENTED for "NOT_IMPLEMENTED"
            /// </summary>
            [EnumMember(Value = "NOT_IMPLEMENTED")]
            NOTIMPLEMENTED,
            
            /// <summary>
            /// Enum BADGATEWAY for "BAD_GATEWAY"
            /// </summary>
            [EnumMember(Value = "BAD_GATEWAY")]
            BADGATEWAY,
            
            /// <summary>
            /// Enum SERVICEUNAVAILABLE for "SERVICE_UNAVAILABLE"
            /// </summary>
            [EnumMember(Value = "SERVICE_UNAVAILABLE")]
            SERVICEUNAVAILABLE,
            
            /// <summary>
            /// Enum GATEWAYTIMEOUT for "GATEWAY_TIMEOUT"
            /// </summary>
            [EnumMember(Value = "GATEWAY_TIMEOUT")]
            GATEWAYTIMEOUT,
            
            /// <summary>
            /// Enum HTTPVERSIONNOTSUPPORTED for "HTTP_VERSION_NOT_SUPPORTED"
            /// </summary>
            [EnumMember(Value = "HTTP_VERSION_NOT_SUPPORTED")]
            HTTPVERSIONNOTSUPPORTED,
            
            /// <summary>
            /// Enum VARIANTALSONEGOTIATES for "VARIANT_ALSO_NEGOTIATES"
            /// </summary>
            [EnumMember(Value = "VARIANT_ALSO_NEGOTIATES")]
            VARIANTALSONEGOTIATES,
            
            /// <summary>
            /// Enum INSUFFICIENTSTORAGE for "INSUFFICIENT_STORAGE"
            /// </summary>
            [EnumMember(Value = "INSUFFICIENT_STORAGE")]
            INSUFFICIENTSTORAGE,
            
            /// <summary>
            /// Enum LOOPDETECTED for "LOOP_DETECTED"
            /// </summary>
            [EnumMember(Value = "LOOP_DETECTED")]
            LOOPDETECTED,
            
            /// <summary>
            /// Enum BANDWIDTHLIMITEXCEEDED for "BANDWIDTH_LIMIT_EXCEEDED"
            /// </summary>
            [EnumMember(Value = "BANDWIDTH_LIMIT_EXCEEDED")]
            BANDWIDTHLIMITEXCEEDED,
            
            /// <summary>
            /// Enum NOTEXTENDED for "NOT_EXTENDED"
            /// </summary>
            [EnumMember(Value = "NOT_EXTENDED")]
            NOTEXTENDED,
            
            /// <summary>
            /// Enum NETWORKAUTHENTICATIONREQUIRED for "NETWORK_AUTHENTICATION_REQUIRED"
            /// </summary>
            [EnumMember(Value = "NETWORK_AUTHENTICATION_REQUIRED")]
            NETWORKAUTHENTICATIONREQUIRED
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAndView" /> class.
        /// </summary>
        /// <param name="Empty">Empty.</param>
        /// <param name="Model">Model.</param>
        /// <param name="ModelMap">ModelMap.</param>
        /// <param name="Reference">Reference.</param>
        /// <param name="Status">Status.</param>
        /// <param name="View">View.</param>
        /// <param name="ViewName">ViewName.</param>
        public ModelAndView(bool? Empty = null, Object Model = null, Dictionary<string, Object> ModelMap = null, bool? Reference = null, StatusEnum? Status = null, View View = null, string ViewName = null)
        {
            this.Empty = Empty;
            this.Model = Model;
            this.ModelMap = ModelMap;
            this.Reference = Reference;
            this.Status = Status;
            this.View = View;
            this.ViewName = ViewName;
        }
        
        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [DataMember(Name="empty", EmitDefaultValue=false)]
        public bool? Empty { get; set; }
        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public Object Model { get; set; }
        /// <summary>
        /// Gets or Sets ModelMap
        /// </summary>
        [DataMember(Name="modelMap", EmitDefaultValue=false)]
        public Dictionary<string, Object> ModelMap { get; set; }
        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public bool? Reference { get; set; }
        /// <summary>
        /// Gets or Sets View
        /// </summary>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public View View { get; set; }
        /// <summary>
        /// Gets or Sets ViewName
        /// </summary>
        [DataMember(Name="viewName", EmitDefaultValue=false)]
        public string ViewName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelAndView {\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ModelMap: ").Append(ModelMap).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  ViewName: ").Append(ViewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ModelAndView);
        }

        /// <summary>
        /// Returns true if ModelAndView instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelAndView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelAndView other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Empty == other.Empty ||
                    this.Empty != null &&
                    this.Empty.Equals(other.Empty)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.ModelMap == other.ModelMap ||
                    this.ModelMap != null &&
                    this.ModelMap.SequenceEqual(other.ModelMap)
                ) && 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.View == other.View ||
                    this.View != null &&
                    this.View.Equals(other.View)
                ) && 
                (
                    this.ViewName == other.ViewName ||
                    this.ViewName != null &&
                    this.ViewName.Equals(other.ViewName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Empty != null)
                    hash = hash * 59 + this.Empty.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.ModelMap != null)
                    hash = hash * 59 + this.ModelMap.GetHashCode();
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.View != null)
                    hash = hash * 59 + this.View.GetHashCode();
                if (this.ViewName != null)
                    hash = hash * 59 + this.ViewName.GetHashCode();
                return hash;
            }
        }
    }

}
