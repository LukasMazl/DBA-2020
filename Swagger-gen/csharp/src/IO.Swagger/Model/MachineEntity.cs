/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MachineEntity
    /// </summary>
    [DataContract]
    public partial class MachineEntity :  IEquatable<MachineEntity>
    {
        /// <summary>
        /// Gets or Sets MachineEntityState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MachineEntityStateEnum
        {
            
            /// <summary>
            /// Enum MOVING for "MOVING"
            /// </summary>
            [EnumMember(Value = "MOVING")]
            MOVING,
            
            /// <summary>
            /// Enum STOPPED for "STOPPED"
            /// </summary>
            [EnumMember(Value = "STOPPED")]
            STOPPED,
            
            /// <summary>
            /// Enum WORKING for "WORKING"
            /// </summary>
            [EnumMember(Value = "WORKING")]
            WORKING
        }

        /// <summary>
        /// Gets or Sets MachineTypeEntity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MachineTypeEntityEnum
        {
            
            /// <summary>
            /// Enum TRACTOR for "TRACTOR"
            /// </summary>
            [EnumMember(Value = "TRACTOR")]
            TRACTOR,
            
            /// <summary>
            /// Enum COMBINE for "COMBINE"
            /// </summary>
            [EnumMember(Value = "COMBINE")]
            COMBINE,
            
            /// <summary>
            /// Enum CAR for "CAR"
            /// </summary>
            [EnumMember(Value = "CAR")]
            CAR,
            
            /// <summary>
            /// Enum TRACK for "TRACK"
            /// </summary>
            [EnumMember(Value = "TRACK")]
            TRACK,
            
            /// <summary>
            /// Enum GRADER for "GRADER"
            /// </summary>
            [EnumMember(Value = "GRADER")]
            GRADER
        }

        /// <summary>
        /// Gets or Sets MachineEntityState
        /// </summary>
        [DataMember(Name="machineEntityState", EmitDefaultValue=false)]
        public MachineEntityStateEnum? MachineEntityState { get; set; }
        /// <summary>
        /// Gets or Sets MachineTypeEntity
        /// </summary>
        [DataMember(Name="machineTypeEntity", EmitDefaultValue=false)]
        public MachineTypeEntityEnum? MachineTypeEntity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineEntity" /> class.
        /// </summary>
        /// <param name="Created">Created.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DeviceEntity">DeviceEntity.</param>
        /// <param name="Id">Id.</param>
        /// <param name="MachineEntityState">MachineEntityState.</param>
        /// <param name="MachineTypeEntity">MachineTypeEntity.</param>
        /// <param name="Manufacturer">Manufacturer.</param>
        /// <param name="Vin">Vin.</param>
        public MachineEntity(DateTime? Created = null, string Description = null, DeviceEntity DeviceEntity = null, long? Id = null, MachineEntityStateEnum? MachineEntityState = null, MachineTypeEntityEnum? MachineTypeEntity = null, string Manufacturer = null, string Vin = null)
        {
            this.Created = Created;
            this.Description = Description;
            this.DeviceEntity = DeviceEntity;
            this.Id = Id;
            this.MachineEntityState = MachineEntityState;
            this.MachineTypeEntity = MachineTypeEntity;
            this.Manufacturer = Manufacturer;
            this.Vin = Vin;
        }
        
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets DeviceEntity
        /// </summary>
        [DataMember(Name="deviceEntity", EmitDefaultValue=false)]
        public DeviceEntity DeviceEntity { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }
        /// <summary>
        /// Gets or Sets Vin
        /// </summary>
        [DataMember(Name="vin", EmitDefaultValue=false)]
        public string Vin { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachineEntity {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeviceEntity: ").Append(DeviceEntity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MachineEntityState: ").Append(MachineEntityState).Append("\n");
            sb.Append("  MachineTypeEntity: ").Append(MachineTypeEntity).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Vin: ").Append(Vin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MachineEntity);
        }

        /// <summary>
        /// Returns true if MachineEntity instances are equal
        /// </summary>
        /// <param name="other">Instance of MachineEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachineEntity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DeviceEntity == other.DeviceEntity ||
                    this.DeviceEntity != null &&
                    this.DeviceEntity.Equals(other.DeviceEntity)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.MachineEntityState == other.MachineEntityState ||
                    this.MachineEntityState != null &&
                    this.MachineEntityState.Equals(other.MachineEntityState)
                ) && 
                (
                    this.MachineTypeEntity == other.MachineTypeEntity ||
                    this.MachineTypeEntity != null &&
                    this.MachineTypeEntity.Equals(other.MachineTypeEntity)
                ) && 
                (
                    this.Manufacturer == other.Manufacturer ||
                    this.Manufacturer != null &&
                    this.Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    this.Vin == other.Vin ||
                    this.Vin != null &&
                    this.Vin.Equals(other.Vin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DeviceEntity != null)
                    hash = hash * 59 + this.DeviceEntity.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.MachineEntityState != null)
                    hash = hash * 59 + this.MachineEntityState.GetHashCode();
                if (this.MachineTypeEntity != null)
                    hash = hash * 59 + this.MachineTypeEntity.GetHashCode();
                if (this.Manufacturer != null)
                    hash = hash * 59 + this.Manufacturer.GetHashCode();
                if (this.Vin != null)
                    hash = hash * 59 + this.Vin.GetHashCode();
                return hash;
            }
        }
    }

}
