/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdateDeviceDTO
    /// </summary>
    [DataContract]
    public partial class UpdateDeviceDTO :  IEquatable<UpdateDeviceDTO>
    {
        /// <summary>
        /// Gets or Sets DeviceStateEntity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeviceStateEntityEnum
        {
            
            /// <summary>
            /// Enum STOP for "STOP"
            /// </summary>
            [EnumMember(Value = "STOP")]
            STOP,
            
            /// <summary>
            /// Enum RUNNING for "RUNNING"
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING,
            
            /// <summary>
            /// Enum WAITING for "WAITING"
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING,
            
            /// <summary>
            /// Enum DELETED for "DELETED"
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED,
            
            /// <summary>
            /// Enum NEW for "NEW"
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW
        }

        /// <summary>
        /// Gets or Sets DeviceStateEntity
        /// </summary>
        [DataMember(Name="deviceStateEntity", EmitDefaultValue=false)]
        public DeviceStateEntityEnum? DeviceStateEntity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDeviceDTO" /> class.
        /// </summary>
        /// <param name="DeviceDescription">DeviceDescription.</param>
        /// <param name="DeviceStateEntity">DeviceStateEntity.</param>
        /// <param name="SerialNumber">SerialNumber.</param>
        public UpdateDeviceDTO(string DeviceDescription = null, DeviceStateEntityEnum? DeviceStateEntity = null, string SerialNumber = null)
        {
            this.DeviceDescription = DeviceDescription;
            this.DeviceStateEntity = DeviceStateEntity;
            this.SerialNumber = SerialNumber;
        }
        
        /// <summary>
        /// Gets or Sets DeviceDescription
        /// </summary>
        [DataMember(Name="deviceDescription", EmitDefaultValue=false)]
        public string DeviceDescription { get; set; }
        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDeviceDTO {\n");
            sb.Append("  DeviceDescription: ").Append(DeviceDescription).Append("\n");
            sb.Append("  DeviceStateEntity: ").Append(DeviceStateEntity).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateDeviceDTO);
        }

        /// <summary>
        /// Returns true if UpdateDeviceDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateDeviceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDeviceDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DeviceDescription == other.DeviceDescription ||
                    this.DeviceDescription != null &&
                    this.DeviceDescription.Equals(other.DeviceDescription)
                ) && 
                (
                    this.DeviceStateEntity == other.DeviceStateEntity ||
                    this.DeviceStateEntity != null &&
                    this.DeviceStateEntity.Equals(other.DeviceStateEntity)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DeviceDescription != null)
                    hash = hash * 59 + this.DeviceDescription.GetHashCode();
                if (this.DeviceStateEntity != null)
                    hash = hash * 59 + this.DeviceStateEntity.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                return hash;
            }
        }
    }

}
