/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMachineEntityEntityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// deleteMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteMachineEntityUsingDELETE (long? id);

        /// <summary>
        /// deleteMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMachineEntityUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// findAllMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>CollectionModelMachineEntity</returns>
        CollectionModelMachineEntity FindAllMachineEntityUsingGET (int? page = null, int? size = null, string sort = null);

        /// <summary>
        /// findAllMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>ApiResponse of CollectionModelMachineEntity</returns>
        ApiResponse<CollectionModelMachineEntity> FindAllMachineEntityUsingGETWithHttpInfo (int? page = null, int? size = null, string sort = null);
        /// <summary>
        /// findByIdMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity FindByIdMachineEntityUsingGET (long? id);

        /// <summary>
        /// findByIdMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> FindByIdMachineEntityUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// findByVinMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity FindByVinMachineEntityUsingGET (string param0 = null);

        /// <summary>
        /// findByVinMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> FindByVinMachineEntityUsingGETWithHttpInfo (string param0 = null);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void MachineEntityDeviceEntityUsingDELETE (long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MachineEntityDeviceEntityUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity MachineEntityDeviceEntityUsingGET (long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity MachineEntityDeviceEntityUsingPATCH (string body, long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPATCHWithHttpInfo (string body, long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity MachineEntityDeviceEntityUsingPOST (string body, long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPOSTWithHttpInfo (string body, long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity MachineEntityDeviceEntityUsingPUT (string body, long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPUTWithHttpInfo (string body, long? id);
        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity SaveMachineEntityUsingPATCH (MachineEntity body, long? id);

        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> SaveMachineEntityUsingPATCHWithHttpInfo (MachineEntity body, long? id);
        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity SaveMachineEntityUsingPOST (MachineEntity body);

        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> SaveMachineEntityUsingPOSTWithHttpInfo (MachineEntity body);
        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity SaveMachineEntityUsingPUT (MachineEntity body, long? id);

        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> SaveMachineEntityUsingPUTWithHttpInfo (MachineEntity body, long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// deleteMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMachineEntityUsingDELETEAsync (long? id);

        /// <summary>
        /// deleteMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMachineEntityUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// findAllMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of CollectionModelMachineEntity</returns>
        System.Threading.Tasks.Task<CollectionModelMachineEntity> FindAllMachineEntityUsingGETAsync (int? page = null, int? size = null, string sort = null);

        /// <summary>
        /// findAllMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of ApiResponse (CollectionModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionModelMachineEntity>> FindAllMachineEntityUsingGETAsyncWithHttpInfo (int? page = null, int? size = null, string sort = null);
        /// <summary>
        /// findByIdMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> FindByIdMachineEntityUsingGETAsync (long? id);

        /// <summary>
        /// findByIdMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> FindByIdMachineEntityUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// findByVinMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> FindByVinMachineEntityUsingGETAsync (string param0 = null);

        /// <summary>
        /// findByVinMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> FindByVinMachineEntityUsingGETAsyncWithHttpInfo (string param0 = null);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MachineEntityDeviceEntityUsingDELETEAsync (long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MachineEntityDeviceEntityUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingGETAsync (long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPATCHAsync (string body, long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingPATCHAsyncWithHttpInfo (string body, long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPOSTAsync (string body, long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingPOSTAsyncWithHttpInfo (string body, long? id);
        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPUTAsync (string body, long? id);

        /// <summary>
        /// machineEntityDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingPUTAsyncWithHttpInfo (string body, long? id);
        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> SaveMachineEntityUsingPATCHAsync (MachineEntity body, long? id);

        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> SaveMachineEntityUsingPATCHAsyncWithHttpInfo (MachineEntity body, long? id);
        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> SaveMachineEntityUsingPOSTAsync (MachineEntity body);

        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> SaveMachineEntityUsingPOSTAsyncWithHttpInfo (MachineEntity body);
        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> SaveMachineEntityUsingPUTAsync (MachineEntity body, long? id);

        /// <summary>
        /// saveMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> SaveMachineEntityUsingPUTAsyncWithHttpInfo (MachineEntity body, long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MachineEntityEntityApi : IMachineEntityEntityApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineEntityEntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MachineEntityEntityApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineEntityEntityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MachineEntityEntityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// deleteMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteMachineEntityUsingDELETE (long? id)
        {
             DeleteMachineEntityUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// deleteMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMachineEntityUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->DeleteMachineEntityUsingDELETE");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMachineEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deleteMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMachineEntityUsingDELETEAsync (long? id)
        {
             await DeleteMachineEntityUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deleteMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMachineEntityUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->DeleteMachineEntityUsingDELETE");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMachineEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// findAllMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>CollectionModelMachineEntity</returns>
        public CollectionModelMachineEntity FindAllMachineEntityUsingGET (int? page = null, int? size = null, string sort = null)
        {
             ApiResponse<CollectionModelMachineEntity> localVarResponse = FindAllMachineEntityUsingGETWithHttpInfo(page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findAllMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>ApiResponse of CollectionModelMachineEntity</returns>
        public ApiResponse< CollectionModelMachineEntity > FindAllMachineEntityUsingGETWithHttpInfo (int? page = null, int? size = null, string sort = null)
        {

            var localVarPath = "/machineEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/hal+json", 
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionModelMachineEntity)));
            
        }

        /// <summary>
        /// findAllMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of CollectionModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<CollectionModelMachineEntity> FindAllMachineEntityUsingGETAsync (int? page = null, int? size = null, string sort = null)
        {
             ApiResponse<CollectionModelMachineEntity> localVarResponse = await FindAllMachineEntityUsingGETAsyncWithHttpInfo(page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findAllMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of ApiResponse (CollectionModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionModelMachineEntity>> FindAllMachineEntityUsingGETAsyncWithHttpInfo (int? page = null, int? size = null, string sort = null)
        {

            var localVarPath = "/machineEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/hal+json", 
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionModelMachineEntity)));
            
        }

        /// <summary>
        /// findByIdMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity FindByIdMachineEntityUsingGET (long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = FindByIdMachineEntityUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findByIdMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > FindByIdMachineEntityUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->FindByIdMachineEntityUsingGET");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// findByIdMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> FindByIdMachineEntityUsingGETAsync (long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await FindByIdMachineEntityUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findByIdMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> FindByIdMachineEntityUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->FindByIdMachineEntityUsingGET");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// findByVinMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity FindByVinMachineEntityUsingGET (string param0 = null)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = FindByVinMachineEntityUsingGETWithHttpInfo(param0);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findByVinMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > FindByVinMachineEntityUsingGETWithHttpInfo (string param0 = null)
        {

            var localVarPath = "/machineEntities/search/findByVin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (param0 != null) localVarQueryParams.Add("param0", Configuration.ApiClient.ParameterToString(param0)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByVinMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// findByVinMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> FindByVinMachineEntityUsingGETAsync (string param0 = null)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await FindByVinMachineEntityUsingGETAsyncWithHttpInfo(param0);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findByVinMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param0">param0 (optional)</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> FindByVinMachineEntityUsingGETAsyncWithHttpInfo (string param0 = null)
        {

            var localVarPath = "/machineEntities/search/findByVin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (param0 != null) localVarQueryParams.Add("param0", Configuration.ApiClient.ParameterToString(param0)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByVinMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void MachineEntityDeviceEntityUsingDELETE (long? id)
        {
             MachineEntityDeviceEntityUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MachineEntityDeviceEntityUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingDELETE");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MachineEntityDeviceEntityUsingDELETEAsync (long? id)
        {
             await MachineEntityDeviceEntityUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MachineEntityDeviceEntityUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingDELETE");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity MachineEntityDeviceEntityUsingGET (long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = MachineEntityDeviceEntityUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > MachineEntityDeviceEntityUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingGET");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingGETAsync (long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await MachineEntityDeviceEntityUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingGET");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity MachineEntityDeviceEntityUsingPATCH (string body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = MachineEntityDeviceEntityUsingPATCHWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > MachineEntityDeviceEntityUsingPATCHWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPATCH");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPATCHAsync (string body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await MachineEntityDeviceEntityUsingPATCHAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingPATCHAsyncWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPATCH");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity MachineEntityDeviceEntityUsingPOST (string body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = MachineEntityDeviceEntityUsingPOSTWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > MachineEntityDeviceEntityUsingPOSTWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPOST");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPOSTAsync (string body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await MachineEntityDeviceEntityUsingPOSTAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingPOSTAsyncWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPOST");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity MachineEntityDeviceEntityUsingPUT (string body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = MachineEntityDeviceEntityUsingPUTWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > MachineEntityDeviceEntityUsingPUTWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPUT");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> MachineEntityDeviceEntityUsingPUTAsync (string body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await MachineEntityDeviceEntityUsingPUTAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// machineEntityDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> MachineEntityDeviceEntityUsingPUTAsyncWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->MachineEntityDeviceEntityUsingPUT");

            var localVarPath = "/machineEntities/{id}/deviceEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MachineEntityDeviceEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity SaveMachineEntityUsingPATCH (MachineEntity body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = SaveMachineEntityUsingPATCHWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > SaveMachineEntityUsingPATCHWithHttpInfo (MachineEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->SaveMachineEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->SaveMachineEntityUsingPATCH");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveMachineEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> SaveMachineEntityUsingPATCHAsync (MachineEntity body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await SaveMachineEntityUsingPATCHAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> SaveMachineEntityUsingPATCHAsyncWithHttpInfo (MachineEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->SaveMachineEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->SaveMachineEntityUsingPATCH");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveMachineEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity SaveMachineEntityUsingPOST (MachineEntity body)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = SaveMachineEntityUsingPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > SaveMachineEntityUsingPOSTWithHttpInfo (MachineEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->SaveMachineEntityUsingPOST");

            var localVarPath = "/machineEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveMachineEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> SaveMachineEntityUsingPOSTAsync (MachineEntity body)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await SaveMachineEntityUsingPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> SaveMachineEntityUsingPOSTAsyncWithHttpInfo (MachineEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->SaveMachineEntityUsingPOST");

            var localVarPath = "/machineEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveMachineEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity SaveMachineEntityUsingPUT (MachineEntity body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = SaveMachineEntityUsingPUTWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > SaveMachineEntityUsingPUTWithHttpInfo (MachineEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->SaveMachineEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->SaveMachineEntityUsingPUT");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveMachineEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> SaveMachineEntityUsingPUTAsync (MachineEntity body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await SaveMachineEntityUsingPUTAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// saveMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> SaveMachineEntityUsingPUTAsyncWithHttpInfo (MachineEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachineEntityEntityApi->SaveMachineEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MachineEntityEntityApi->SaveMachineEntityUsingPUT");

            var localVarPath = "/machineEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveMachineEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

    }
}
