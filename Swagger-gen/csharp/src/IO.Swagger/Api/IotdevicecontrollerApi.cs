/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIotdevicecontrollerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// createDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>CreateDeviceResponse</returns>
        CreateDeviceResponse CreateDeviceUsingPOST (CreateDeviceDTO createDeviceDTO);

        /// <summary>
        /// createDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>ApiResponse of CreateDeviceResponse</returns>
        ApiResponse<CreateDeviceResponse> CreateDeviceUsingPOSTWithHttpInfo (CreateDeviceDTO createDeviceDTO);
        /// <summary>
        /// deleteDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>DeleteDeviceResponse</returns>
        DeleteDeviceResponse DeleteDeviceUsingPOST (string serialNumber);

        /// <summary>
        /// deleteDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>ApiResponse of DeleteDeviceResponse</returns>
        ApiResponse<DeleteDeviceResponse> DeleteDeviceUsingPOSTWithHttpInfo (string serialNumber);
        /// <summary>
        /// getAllFreeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AllFreeDeviceDTO</returns>
        AllFreeDeviceDTO GetAllFreeDeviceUsingPOST ();

        /// <summary>
        /// getAllFreeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AllFreeDeviceDTO</returns>
        ApiResponse<AllFreeDeviceDTO> GetAllFreeDeviceUsingPOSTWithHttpInfo ();
        /// <summary>
        /// getDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>DeviceConfigurationDTO</returns>
        DeviceConfigurationDTO GetDeviceConfigurationUsingPOST (string serialNumber);

        /// <summary>
        /// getDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>ApiResponse of DeviceConfigurationDTO</returns>
        ApiResponse<DeviceConfigurationDTO> GetDeviceConfigurationUsingPOSTWithHttpInfo (string serialNumber);
        /// <summary>
        /// recordNewState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>RecordNewStateResponse</returns>
        RecordNewStateResponse RecordNewStateUsingPOST (RecordMachineStateDTO recordMachineStateDTO);

        /// <summary>
        /// recordNewState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>ApiResponse of RecordNewStateResponse</returns>
        ApiResponse<RecordNewStateResponse> RecordNewStateUsingPOSTWithHttpInfo (RecordMachineStateDTO recordMachineStateDTO);
        /// <summary>
        /// setDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>DeviceConfigurationResponse</returns>
        DeviceConfigurationResponse SetDeviceConfigurationUsingPOST (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber);

        /// <summary>
        /// setDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>ApiResponse of DeviceConfigurationResponse</returns>
        ApiResponse<DeviceConfigurationResponse> SetDeviceConfigurationUsingPOSTWithHttpInfo (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber);
        /// <summary>
        /// takeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>TakeDeviceResponse</returns>
        TakeDeviceResponse TakeDeviceUsingPOST (TakeDeviceDTO takeDeviceDTO);

        /// <summary>
        /// takeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>ApiResponse of TakeDeviceResponse</returns>
        ApiResponse<TakeDeviceResponse> TakeDeviceUsingPOSTWithHttpInfo (TakeDeviceDTO takeDeviceDTO);
        /// <summary>
        /// updateDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>UpdateDeviceResponse</returns>
        UpdateDeviceResponse UpdateDeviceUsingPOST (string serialNumber, UpdateDeviceDTO updateDeviceDTO);

        /// <summary>
        /// updateDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>ApiResponse of UpdateDeviceResponse</returns>
        ApiResponse<UpdateDeviceResponse> UpdateDeviceUsingPOSTWithHttpInfo (string serialNumber, UpdateDeviceDTO updateDeviceDTO);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// createDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>Task of CreateDeviceResponse</returns>
        System.Threading.Tasks.Task<CreateDeviceResponse> CreateDeviceUsingPOSTAsync (CreateDeviceDTO createDeviceDTO);

        /// <summary>
        /// createDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>Task of ApiResponse (CreateDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDeviceResponse>> CreateDeviceUsingPOSTAsyncWithHttpInfo (CreateDeviceDTO createDeviceDTO);
        /// <summary>
        /// deleteDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of DeleteDeviceResponse</returns>
        System.Threading.Tasks.Task<DeleteDeviceResponse> DeleteDeviceUsingPOSTAsync (string serialNumber);

        /// <summary>
        /// deleteDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of ApiResponse (DeleteDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDeviceResponse>> DeleteDeviceUsingPOSTAsyncWithHttpInfo (string serialNumber);
        /// <summary>
        /// getAllFreeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AllFreeDeviceDTO</returns>
        System.Threading.Tasks.Task<AllFreeDeviceDTO> GetAllFreeDeviceUsingPOSTAsync ();

        /// <summary>
        /// getAllFreeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AllFreeDeviceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllFreeDeviceDTO>> GetAllFreeDeviceUsingPOSTAsyncWithHttpInfo ();
        /// <summary>
        /// getDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of DeviceConfigurationDTO</returns>
        System.Threading.Tasks.Task<DeviceConfigurationDTO> GetDeviceConfigurationUsingPOSTAsync (string serialNumber);

        /// <summary>
        /// getDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of ApiResponse (DeviceConfigurationDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceConfigurationDTO>> GetDeviceConfigurationUsingPOSTAsyncWithHttpInfo (string serialNumber);
        /// <summary>
        /// recordNewState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>Task of RecordNewStateResponse</returns>
        System.Threading.Tasks.Task<RecordNewStateResponse> RecordNewStateUsingPOSTAsync (RecordMachineStateDTO recordMachineStateDTO);

        /// <summary>
        /// recordNewState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>Task of ApiResponse (RecordNewStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordNewStateResponse>> RecordNewStateUsingPOSTAsyncWithHttpInfo (RecordMachineStateDTO recordMachineStateDTO);
        /// <summary>
        /// setDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of DeviceConfigurationResponse</returns>
        System.Threading.Tasks.Task<DeviceConfigurationResponse> SetDeviceConfigurationUsingPOSTAsync (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber);

        /// <summary>
        /// setDeviceConfiguration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of ApiResponse (DeviceConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceConfigurationResponse>> SetDeviceConfigurationUsingPOSTAsyncWithHttpInfo (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber);
        /// <summary>
        /// takeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>Task of TakeDeviceResponse</returns>
        System.Threading.Tasks.Task<TakeDeviceResponse> TakeDeviceUsingPOSTAsync (TakeDeviceDTO takeDeviceDTO);

        /// <summary>
        /// takeDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>Task of ApiResponse (TakeDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TakeDeviceResponse>> TakeDeviceUsingPOSTAsyncWithHttpInfo (TakeDeviceDTO takeDeviceDTO);
        /// <summary>
        /// updateDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>Task of UpdateDeviceResponse</returns>
        System.Threading.Tasks.Task<UpdateDeviceResponse> UpdateDeviceUsingPOSTAsync (string serialNumber, UpdateDeviceDTO updateDeviceDTO);

        /// <summary>
        /// updateDevice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>Task of ApiResponse (UpdateDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDeviceResponse>> UpdateDeviceUsingPOSTAsyncWithHttpInfo (string serialNumber, UpdateDeviceDTO updateDeviceDTO);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IotdevicecontrollerApi : IIotdevicecontrollerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IotdevicecontrollerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IotdevicecontrollerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IotdevicecontrollerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IotdevicecontrollerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// createDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>CreateDeviceResponse</returns>
        public CreateDeviceResponse CreateDeviceUsingPOST (CreateDeviceDTO createDeviceDTO)
        {
             ApiResponse<CreateDeviceResponse> localVarResponse = CreateDeviceUsingPOSTWithHttpInfo(createDeviceDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>ApiResponse of CreateDeviceResponse</returns>
        public ApiResponse< CreateDeviceResponse > CreateDeviceUsingPOSTWithHttpInfo (CreateDeviceDTO createDeviceDTO)
        {
            // verify the required parameter 'createDeviceDTO' is set
            if (createDeviceDTO == null)
                throw new ApiException(400, "Missing required parameter 'createDeviceDTO' when calling IotdevicecontrollerApi->CreateDeviceUsingPOST");

            var localVarPath = "/api/v1/device/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createDeviceDTO != null && createDeviceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createDeviceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDeviceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDeviceResponse)));
            
        }

        /// <summary>
        /// createDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>Task of CreateDeviceResponse</returns>
        public async System.Threading.Tasks.Task<CreateDeviceResponse> CreateDeviceUsingPOSTAsync (CreateDeviceDTO createDeviceDTO)
        {
             ApiResponse<CreateDeviceResponse> localVarResponse = await CreateDeviceUsingPOSTAsyncWithHttpInfo(createDeviceDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceDTO">createDeviceDTO</param>
        /// <returns>Task of ApiResponse (CreateDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateDeviceResponse>> CreateDeviceUsingPOSTAsyncWithHttpInfo (CreateDeviceDTO createDeviceDTO)
        {
            // verify the required parameter 'createDeviceDTO' is set
            if (createDeviceDTO == null)
                throw new ApiException(400, "Missing required parameter 'createDeviceDTO' when calling IotdevicecontrollerApi->CreateDeviceUsingPOST");

            var localVarPath = "/api/v1/device/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createDeviceDTO != null && createDeviceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createDeviceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDeviceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDeviceResponse)));
            
        }

        /// <summary>
        /// deleteDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>DeleteDeviceResponse</returns>
        public DeleteDeviceResponse DeleteDeviceUsingPOST (string serialNumber)
        {
             ApiResponse<DeleteDeviceResponse> localVarResponse = DeleteDeviceUsingPOSTWithHttpInfo(serialNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>ApiResponse of DeleteDeviceResponse</returns>
        public ApiResponse< DeleteDeviceResponse > DeleteDeviceUsingPOSTWithHttpInfo (string serialNumber)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->DeleteDeviceUsingPOST");

            var localVarPath = "/api/v1/device/delete/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDeviceResponse)));
            
        }

        /// <summary>
        /// deleteDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of DeleteDeviceResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDeviceResponse> DeleteDeviceUsingPOSTAsync (string serialNumber)
        {
             ApiResponse<DeleteDeviceResponse> localVarResponse = await DeleteDeviceUsingPOSTAsyncWithHttpInfo(serialNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of ApiResponse (DeleteDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteDeviceResponse>> DeleteDeviceUsingPOSTAsyncWithHttpInfo (string serialNumber)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->DeleteDeviceUsingPOST");

            var localVarPath = "/api/v1/device/delete/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDeviceResponse)));
            
        }

        /// <summary>
        /// getAllFreeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AllFreeDeviceDTO</returns>
        public AllFreeDeviceDTO GetAllFreeDeviceUsingPOST ()
        {
             ApiResponse<AllFreeDeviceDTO> localVarResponse = GetAllFreeDeviceUsingPOSTWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllFreeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AllFreeDeviceDTO</returns>
        public ApiResponse< AllFreeDeviceDTO > GetAllFreeDeviceUsingPOSTWithHttpInfo ()
        {

            var localVarPath = "/api/v1/device/allFree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFreeDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllFreeDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllFreeDeviceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllFreeDeviceDTO)));
            
        }

        /// <summary>
        /// getAllFreeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AllFreeDeviceDTO</returns>
        public async System.Threading.Tasks.Task<AllFreeDeviceDTO> GetAllFreeDeviceUsingPOSTAsync ()
        {
             ApiResponse<AllFreeDeviceDTO> localVarResponse = await GetAllFreeDeviceUsingPOSTAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllFreeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AllFreeDeviceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllFreeDeviceDTO>> GetAllFreeDeviceUsingPOSTAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/device/allFree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFreeDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllFreeDeviceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllFreeDeviceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllFreeDeviceDTO)));
            
        }

        /// <summary>
        /// getDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>DeviceConfigurationDTO</returns>
        public DeviceConfigurationDTO GetDeviceConfigurationUsingPOST (string serialNumber)
        {
             ApiResponse<DeviceConfigurationDTO> localVarResponse = GetDeviceConfigurationUsingPOSTWithHttpInfo(serialNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>ApiResponse of DeviceConfigurationDTO</returns>
        public ApiResponse< DeviceConfigurationDTO > GetDeviceConfigurationUsingPOSTWithHttpInfo (string serialNumber)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->GetDeviceConfigurationUsingPOST");

            var localVarPath = "/api/v1/device/configuration/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceConfigurationUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfigurationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfigurationDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfigurationDTO)));
            
        }

        /// <summary>
        /// getDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of DeviceConfigurationDTO</returns>
        public async System.Threading.Tasks.Task<DeviceConfigurationDTO> GetDeviceConfigurationUsingPOSTAsync (string serialNumber)
        {
             ApiResponse<DeviceConfigurationDTO> localVarResponse = await GetDeviceConfigurationUsingPOSTAsyncWithHttpInfo(serialNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of ApiResponse (DeviceConfigurationDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceConfigurationDTO>> GetDeviceConfigurationUsingPOSTAsyncWithHttpInfo (string serialNumber)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->GetDeviceConfigurationUsingPOST");

            var localVarPath = "/api/v1/device/configuration/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceConfigurationUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfigurationDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfigurationDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfigurationDTO)));
            
        }

        /// <summary>
        /// recordNewState 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>RecordNewStateResponse</returns>
        public RecordNewStateResponse RecordNewStateUsingPOST (RecordMachineStateDTO recordMachineStateDTO)
        {
             ApiResponse<RecordNewStateResponse> localVarResponse = RecordNewStateUsingPOSTWithHttpInfo(recordMachineStateDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// recordNewState 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>ApiResponse of RecordNewStateResponse</returns>
        public ApiResponse< RecordNewStateResponse > RecordNewStateUsingPOSTWithHttpInfo (RecordMachineStateDTO recordMachineStateDTO)
        {
            // verify the required parameter 'recordMachineStateDTO' is set
            if (recordMachineStateDTO == null)
                throw new ApiException(400, "Missing required parameter 'recordMachineStateDTO' when calling IotdevicecontrollerApi->RecordNewStateUsingPOST");

            var localVarPath = "/api/v1/device/record";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordMachineStateDTO != null && recordMachineStateDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(recordMachineStateDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recordMachineStateDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecordNewStateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordNewStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordNewStateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordNewStateResponse)));
            
        }

        /// <summary>
        /// recordNewState 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>Task of RecordNewStateResponse</returns>
        public async System.Threading.Tasks.Task<RecordNewStateResponse> RecordNewStateUsingPOSTAsync (RecordMachineStateDTO recordMachineStateDTO)
        {
             ApiResponse<RecordNewStateResponse> localVarResponse = await RecordNewStateUsingPOSTAsyncWithHttpInfo(recordMachineStateDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// recordNewState 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordMachineStateDTO">recordMachineStateDTO</param>
        /// <returns>Task of ApiResponse (RecordNewStateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordNewStateResponse>> RecordNewStateUsingPOSTAsyncWithHttpInfo (RecordMachineStateDTO recordMachineStateDTO)
        {
            // verify the required parameter 'recordMachineStateDTO' is set
            if (recordMachineStateDTO == null)
                throw new ApiException(400, "Missing required parameter 'recordMachineStateDTO' when calling IotdevicecontrollerApi->RecordNewStateUsingPOST");

            var localVarPath = "/api/v1/device/record";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordMachineStateDTO != null && recordMachineStateDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(recordMachineStateDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recordMachineStateDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecordNewStateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordNewStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordNewStateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordNewStateResponse)));
            
        }

        /// <summary>
        /// setDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>DeviceConfigurationResponse</returns>
        public DeviceConfigurationResponse SetDeviceConfigurationUsingPOST (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber)
        {
             ApiResponse<DeviceConfigurationResponse> localVarResponse = SetDeviceConfigurationUsingPOSTWithHttpInfo(newDeviceConfigurationDTO, serialNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// setDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>ApiResponse of DeviceConfigurationResponse</returns>
        public ApiResponse< DeviceConfigurationResponse > SetDeviceConfigurationUsingPOSTWithHttpInfo (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber)
        {
            // verify the required parameter 'newDeviceConfigurationDTO' is set
            if (newDeviceConfigurationDTO == null)
                throw new ApiException(400, "Missing required parameter 'newDeviceConfigurationDTO' when calling IotdevicecontrollerApi->SetDeviceConfigurationUsingPOST");
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->SetDeviceConfigurationUsingPOST");

            var localVarPath = "/api/v1/device/configuration/set/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter
            if (newDeviceConfigurationDTO != null && newDeviceConfigurationDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newDeviceConfigurationDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newDeviceConfigurationDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDeviceConfigurationUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfigurationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfigurationResponse)));
            
        }

        /// <summary>
        /// setDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of DeviceConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<DeviceConfigurationResponse> SetDeviceConfigurationUsingPOSTAsync (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber)
        {
             ApiResponse<DeviceConfigurationResponse> localVarResponse = await SetDeviceConfigurationUsingPOSTAsyncWithHttpInfo(newDeviceConfigurationDTO, serialNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// setDeviceConfiguration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDeviceConfigurationDTO">newDeviceConfigurationDTO</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <returns>Task of ApiResponse (DeviceConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceConfigurationResponse>> SetDeviceConfigurationUsingPOSTAsyncWithHttpInfo (NewDeviceConfigurationDTO newDeviceConfigurationDTO, string serialNumber)
        {
            // verify the required parameter 'newDeviceConfigurationDTO' is set
            if (newDeviceConfigurationDTO == null)
                throw new ApiException(400, "Missing required parameter 'newDeviceConfigurationDTO' when calling IotdevicecontrollerApi->SetDeviceConfigurationUsingPOST");
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->SetDeviceConfigurationUsingPOST");

            var localVarPath = "/api/v1/device/configuration/set/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter
            if (newDeviceConfigurationDTO != null && newDeviceConfigurationDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newDeviceConfigurationDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newDeviceConfigurationDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDeviceConfigurationUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceConfigurationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceConfigurationResponse)));
            
        }

        /// <summary>
        /// takeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>TakeDeviceResponse</returns>
        public TakeDeviceResponse TakeDeviceUsingPOST (TakeDeviceDTO takeDeviceDTO)
        {
             ApiResponse<TakeDeviceResponse> localVarResponse = TakeDeviceUsingPOSTWithHttpInfo(takeDeviceDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// takeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>ApiResponse of TakeDeviceResponse</returns>
        public ApiResponse< TakeDeviceResponse > TakeDeviceUsingPOSTWithHttpInfo (TakeDeviceDTO takeDeviceDTO)
        {
            // verify the required parameter 'takeDeviceDTO' is set
            if (takeDeviceDTO == null)
                throw new ApiException(400, "Missing required parameter 'takeDeviceDTO' when calling IotdevicecontrollerApi->TakeDeviceUsingPOST");

            var localVarPath = "/api/v1/device/setTaken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (takeDeviceDTO != null && takeDeviceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(takeDeviceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = takeDeviceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TakeDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TakeDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TakeDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TakeDeviceResponse)));
            
        }

        /// <summary>
        /// takeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>Task of TakeDeviceResponse</returns>
        public async System.Threading.Tasks.Task<TakeDeviceResponse> TakeDeviceUsingPOSTAsync (TakeDeviceDTO takeDeviceDTO)
        {
             ApiResponse<TakeDeviceResponse> localVarResponse = await TakeDeviceUsingPOSTAsyncWithHttpInfo(takeDeviceDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// takeDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeDeviceDTO">takeDeviceDTO</param>
        /// <returns>Task of ApiResponse (TakeDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TakeDeviceResponse>> TakeDeviceUsingPOSTAsyncWithHttpInfo (TakeDeviceDTO takeDeviceDTO)
        {
            // verify the required parameter 'takeDeviceDTO' is set
            if (takeDeviceDTO == null)
                throw new ApiException(400, "Missing required parameter 'takeDeviceDTO' when calling IotdevicecontrollerApi->TakeDeviceUsingPOST");

            var localVarPath = "/api/v1/device/setTaken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (takeDeviceDTO != null && takeDeviceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(takeDeviceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = takeDeviceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TakeDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TakeDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TakeDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TakeDeviceResponse)));
            
        }

        /// <summary>
        /// updateDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>UpdateDeviceResponse</returns>
        public UpdateDeviceResponse UpdateDeviceUsingPOST (string serialNumber, UpdateDeviceDTO updateDeviceDTO)
        {
             ApiResponse<UpdateDeviceResponse> localVarResponse = UpdateDeviceUsingPOSTWithHttpInfo(serialNumber, updateDeviceDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>ApiResponse of UpdateDeviceResponse</returns>
        public ApiResponse< UpdateDeviceResponse > UpdateDeviceUsingPOSTWithHttpInfo (string serialNumber, UpdateDeviceDTO updateDeviceDTO)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->UpdateDeviceUsingPOST");
            // verify the required parameter 'updateDeviceDTO' is set
            if (updateDeviceDTO == null)
                throw new ApiException(400, "Missing required parameter 'updateDeviceDTO' when calling IotdevicecontrollerApi->UpdateDeviceUsingPOST");

            var localVarPath = "/api/v1/device/update/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter
            if (updateDeviceDTO != null && updateDeviceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateDeviceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDeviceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDeviceResponse)));
            
        }

        /// <summary>
        /// updateDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>Task of UpdateDeviceResponse</returns>
        public async System.Threading.Tasks.Task<UpdateDeviceResponse> UpdateDeviceUsingPOSTAsync (string serialNumber, UpdateDeviceDTO updateDeviceDTO)
        {
             ApiResponse<UpdateDeviceResponse> localVarResponse = await UpdateDeviceUsingPOSTAsyncWithHttpInfo(serialNumber, updateDeviceDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateDevice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="updateDeviceDTO">updateDeviceDTO</param>
        /// <returns>Task of ApiResponse (UpdateDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateDeviceResponse>> UpdateDeviceUsingPOSTAsyncWithHttpInfo (string serialNumber, UpdateDeviceDTO updateDeviceDTO)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling IotdevicecontrollerApi->UpdateDeviceUsingPOST");
            // verify the required parameter 'updateDeviceDTO' is set
            if (updateDeviceDTO == null)
                throw new ApiException(400, "Missing required parameter 'updateDeviceDTO' when calling IotdevicecontrollerApi->UpdateDeviceUsingPOST");

            var localVarPath = "/api/v1/device/update/{serialNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serialNumber != null) localVarPathParams.Add("serialNumber", Configuration.ApiClient.ParameterToString(serialNumber)); // path parameter
            if (updateDeviceDTO != null && updateDeviceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateDeviceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDeviceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeviceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDeviceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateDeviceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDeviceResponse)));
            
        }

    }
}
