/* 
 * DBA 2020
 *
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceEntityEntityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// deleteDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteDeviceEntityUsingDELETE (long? id);

        /// <summary>
        /// deleteDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeviceEntityUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeviceEntityMachineEntityUsingDELETE (long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeviceEntityMachineEntityUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity DeviceEntityMachineEntityUsingGET (long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> DeviceEntityMachineEntityUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity DeviceEntityMachineEntityUsingPATCH (string body, long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPATCHWithHttpInfo (string body, long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity DeviceEntityMachineEntityUsingPOST (string body, long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPOSTWithHttpInfo (string body, long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        EntityModelMachineEntity DeviceEntityMachineEntityUsingPUT (string body, long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        ApiResponse<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPUTWithHttpInfo (string body, long? id);
        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionModelDeviceEntity</returns>
        CollectionModelDeviceEntity FindAllByMachineEntityIsNullDeviceEntityUsingGET ();

        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionModelDeviceEntity</returns>
        ApiResponse<CollectionModelDeviceEntity> FindAllByMachineEntityIsNullDeviceEntityUsingGETWithHttpInfo ();
        /// <summary>
        /// findAllDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>CollectionModelDeviceEntity</returns>
        CollectionModelDeviceEntity FindAllDeviceEntityUsingGET (int? page = null, int? size = null, string sort = null);

        /// <summary>
        /// findAllDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>ApiResponse of CollectionModelDeviceEntity</returns>
        ApiResponse<CollectionModelDeviceEntity> FindAllDeviceEntityUsingGETWithHttpInfo (int? page = null, int? size = null, string sort = null);
        /// <summary>
        /// findByIdDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity FindByIdDeviceEntityUsingGET (long? id);

        /// <summary>
        /// findByIdDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> FindByIdDeviceEntityUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity SaveDeviceEntityUsingPATCH (DeviceEntity body, long? id);

        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> SaveDeviceEntityUsingPATCHWithHttpInfo (DeviceEntity body, long? id);
        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity SaveDeviceEntityUsingPOST (DeviceEntity body);

        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> SaveDeviceEntityUsingPOSTWithHttpInfo (DeviceEntity body);
        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        EntityModelDeviceEntity SaveDeviceEntityUsingPUT (DeviceEntity body, long? id);

        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        ApiResponse<EntityModelDeviceEntity> SaveDeviceEntityUsingPUTWithHttpInfo (DeviceEntity body, long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// deleteDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeviceEntityUsingDELETEAsync (long? id);

        /// <summary>
        /// deleteDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeviceEntityUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeviceEntityMachineEntityUsingDELETEAsync (long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceEntityMachineEntityUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingGETAsync (long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPATCHAsync (string body, long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingPATCHAsyncWithHttpInfo (string body, long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPOSTAsync (string body, long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingPOSTAsyncWithHttpInfo (string body, long? id);
        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPUTAsync (string body, long? id);

        /// <summary>
        /// deviceEntityMachineEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingPUTAsyncWithHttpInfo (string body, long? id);
        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CollectionModelDeviceEntity</returns>
        System.Threading.Tasks.Task<CollectionModelDeviceEntity> FindAllByMachineEntityIsNullDeviceEntityUsingGETAsync ();

        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CollectionModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionModelDeviceEntity>> FindAllByMachineEntityIsNullDeviceEntityUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// findAllDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of CollectionModelDeviceEntity</returns>
        System.Threading.Tasks.Task<CollectionModelDeviceEntity> FindAllDeviceEntityUsingGETAsync (int? page = null, int? size = null, string sort = null);

        /// <summary>
        /// findAllDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of ApiResponse (CollectionModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionModelDeviceEntity>> FindAllDeviceEntityUsingGETAsyncWithHttpInfo (int? page = null, int? size = null, string sort = null);
        /// <summary>
        /// findByIdDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> FindByIdDeviceEntityUsingGETAsync (long? id);

        /// <summary>
        /// findByIdDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> FindByIdDeviceEntityUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> SaveDeviceEntityUsingPATCHAsync (DeviceEntity body, long? id);

        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> SaveDeviceEntityUsingPATCHAsyncWithHttpInfo (DeviceEntity body, long? id);
        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> SaveDeviceEntityUsingPOSTAsync (DeviceEntity body);

        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> SaveDeviceEntityUsingPOSTAsyncWithHttpInfo (DeviceEntity body);
        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        System.Threading.Tasks.Task<EntityModelDeviceEntity> SaveDeviceEntityUsingPUTAsync (DeviceEntity body, long? id);

        /// <summary>
        /// saveDeviceEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> SaveDeviceEntityUsingPUTAsyncWithHttpInfo (DeviceEntity body, long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceEntityEntityApi : IDeviceEntityEntityApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceEntityEntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceEntityEntityApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceEntityEntityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceEntityEntityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// deleteDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteDeviceEntityUsingDELETE (long? id)
        {
             DeleteDeviceEntityUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// deleteDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDeviceEntityUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeleteDeviceEntityUsingDELETE");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeviceEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deleteDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeviceEntityUsingDELETEAsync (long? id)
        {
             await DeleteDeviceEntityUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deleteDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeviceEntityUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeleteDeviceEntityUsingDELETE");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeviceEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeviceEntityMachineEntityUsingDELETE (long? id)
        {
             DeviceEntityMachineEntityUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeviceEntityMachineEntityUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingDELETE");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeviceEntityMachineEntityUsingDELETEAsync (long? id)
        {
             await DeviceEntityMachineEntityUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceEntityMachineEntityUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingDELETE");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity DeviceEntityMachineEntityUsingGET (long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = DeviceEntityMachineEntityUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > DeviceEntityMachineEntityUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingGET");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingGETAsync (long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await DeviceEntityMachineEntityUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingGET");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity DeviceEntityMachineEntityUsingPATCH (string body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = DeviceEntityMachineEntityUsingPATCHWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > DeviceEntityMachineEntityUsingPATCHWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPATCH");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPATCHAsync (string body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await DeviceEntityMachineEntityUsingPATCHAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingPATCHAsyncWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPATCH");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity DeviceEntityMachineEntityUsingPOST (string body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = DeviceEntityMachineEntityUsingPOSTWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > DeviceEntityMachineEntityUsingPOSTWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPOST");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPOSTAsync (string body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await DeviceEntityMachineEntityUsingPOSTAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingPOSTAsyncWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPOST");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelMachineEntity</returns>
        public EntityModelMachineEntity DeviceEntityMachineEntityUsingPUT (string body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = DeviceEntityMachineEntityUsingPUTWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelMachineEntity</returns>
        public ApiResponse< EntityModelMachineEntity > DeviceEntityMachineEntityUsingPUTWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPUT");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelMachineEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelMachineEntity> DeviceEntityMachineEntityUsingPUTAsync (string body, long? id)
        {
             ApiResponse<EntityModelMachineEntity> localVarResponse = await DeviceEntityMachineEntityUsingPUTAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deviceEntityMachineEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelMachineEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelMachineEntity>> DeviceEntityMachineEntityUsingPUTAsyncWithHttpInfo (string body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->DeviceEntityMachineEntityUsingPUT");

            var localVarPath = "/deviceEntities/{id}/machineEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceEntityMachineEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelMachineEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelMachineEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelMachineEntity)));
            
        }

        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionModelDeviceEntity</returns>
        public CollectionModelDeviceEntity FindAllByMachineEntityIsNullDeviceEntityUsingGET ()
        {
             ApiResponse<CollectionModelDeviceEntity> localVarResponse = FindAllByMachineEntityIsNullDeviceEntityUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionModelDeviceEntity</returns>
        public ApiResponse< CollectionModelDeviceEntity > FindAllByMachineEntityIsNullDeviceEntityUsingGETWithHttpInfo ()
        {

            var localVarPath = "/deviceEntities/search/findAllByMachineEntityIsNull";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllByMachineEntityIsNullDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionModelDeviceEntity)));
            
        }

        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CollectionModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<CollectionModelDeviceEntity> FindAllByMachineEntityIsNullDeviceEntityUsingGETAsync ()
        {
             ApiResponse<CollectionModelDeviceEntity> localVarResponse = await FindAllByMachineEntityIsNullDeviceEntityUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// findAllByMachineEntityIsNullDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CollectionModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionModelDeviceEntity>> FindAllByMachineEntityIsNullDeviceEntityUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/deviceEntities/search/findAllByMachineEntityIsNull";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllByMachineEntityIsNullDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionModelDeviceEntity)));
            
        }

        /// <summary>
        /// findAllDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>CollectionModelDeviceEntity</returns>
        public CollectionModelDeviceEntity FindAllDeviceEntityUsingGET (int? page = null, int? size = null, string sort = null)
        {
             ApiResponse<CollectionModelDeviceEntity> localVarResponse = FindAllDeviceEntityUsingGETWithHttpInfo(page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findAllDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>ApiResponse of CollectionModelDeviceEntity</returns>
        public ApiResponse< CollectionModelDeviceEntity > FindAllDeviceEntityUsingGETWithHttpInfo (int? page = null, int? size = null, string sort = null)
        {

            var localVarPath = "/deviceEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/hal+json", 
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionModelDeviceEntity)));
            
        }

        /// <summary>
        /// findAllDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of CollectionModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<CollectionModelDeviceEntity> FindAllDeviceEntityUsingGETAsync (int? page = null, int? size = null, string sort = null)
        {
             ApiResponse<CollectionModelDeviceEntity> localVarResponse = await FindAllDeviceEntityUsingGETAsyncWithHttpInfo(page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findAllDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page (optional)</param>
        /// <param name="size">size (optional)</param>
        /// <param name="sort">sort (optional)</param>
        /// <returns>Task of ApiResponse (CollectionModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionModelDeviceEntity>> FindAllDeviceEntityUsingGETAsyncWithHttpInfo (int? page = null, int? size = null, string sort = null)
        {

            var localVarPath = "/deviceEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/hal+json", 
                "text/uri-list", 
                "application/x-spring-data-compact+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CollectionModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionModelDeviceEntity)));
            
        }

        /// <summary>
        /// findByIdDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity FindByIdDeviceEntityUsingGET (long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = FindByIdDeviceEntityUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findByIdDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > FindByIdDeviceEntityUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->FindByIdDeviceEntityUsingGET");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// findByIdDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> FindByIdDeviceEntityUsingGETAsync (long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await FindByIdDeviceEntityUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findByIdDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> FindByIdDeviceEntityUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->FindByIdDeviceEntityUsingGET");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdDeviceEntityUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity SaveDeviceEntityUsingPATCH (DeviceEntity body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = SaveDeviceEntityUsingPATCHWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > SaveDeviceEntityUsingPATCHWithHttpInfo (DeviceEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPATCH");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveDeviceEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> SaveDeviceEntityUsingPATCHAsync (DeviceEntity body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await SaveDeviceEntityUsingPATCHAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> SaveDeviceEntityUsingPATCHAsyncWithHttpInfo (DeviceEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPATCH");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveDeviceEntityUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity SaveDeviceEntityUsingPOST (DeviceEntity body)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = SaveDeviceEntityUsingPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > SaveDeviceEntityUsingPOSTWithHttpInfo (DeviceEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPOST");

            var localVarPath = "/deviceEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveDeviceEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> SaveDeviceEntityUsingPOSTAsync (DeviceEntity body)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await SaveDeviceEntityUsingPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> SaveDeviceEntityUsingPOSTAsyncWithHttpInfo (DeviceEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPOST");

            var localVarPath = "/deviceEntities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveDeviceEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>EntityModelDeviceEntity</returns>
        public EntityModelDeviceEntity SaveDeviceEntityUsingPUT (DeviceEntity body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = SaveDeviceEntityUsingPUTWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntityModelDeviceEntity</returns>
        public ApiResponse< EntityModelDeviceEntity > SaveDeviceEntityUsingPUTWithHttpInfo (DeviceEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPUT");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveDeviceEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of EntityModelDeviceEntity</returns>
        public async System.Threading.Tasks.Task<EntityModelDeviceEntity> SaveDeviceEntityUsingPUTAsync (DeviceEntity body, long? id)
        {
             ApiResponse<EntityModelDeviceEntity> localVarResponse = await SaveDeviceEntityUsingPUTAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// saveDeviceEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntityModelDeviceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityModelDeviceEntity>> SaveDeviceEntityUsingPUTAsyncWithHttpInfo (DeviceEntity body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeviceEntityEntityApi->SaveDeviceEntityUsingPUT");

            var localVarPath = "/deviceEntities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveDeviceEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityModelDeviceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityModelDeviceEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityModelDeviceEntity)));
            
        }

    }
}
