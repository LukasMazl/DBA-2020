/**
 * DBA 2020
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.EntityModelMachineEntity;
import io.swagger.client.model.CollectionModelDeviceEntity;
import io.swagger.client.model.EntityModelDeviceEntity;
import io.swagger.client.model.DeviceEntity;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceEntityEntityApi
 */
public class DeviceEntityEntityApiTest {

    private final DeviceEntityEntityApi api = new DeviceEntityEntityApi();

    
    /**
     * deleteDeviceEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceEntityUsingDELETETest() throws ApiException {
        Long id = null;
        // api.deleteDeviceEntityUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * deviceEntityMachineEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceEntityMachineEntityUsingDELETETest() throws ApiException {
        Long id = null;
        // api.deviceEntityMachineEntityUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * deviceEntityMachineEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceEntityMachineEntityUsingGETTest() throws ApiException {
        Long id = null;
        // EntityModelMachineEntity response = api.deviceEntityMachineEntityUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * deviceEntityMachineEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceEntityMachineEntityUsingPATCHTest() throws ApiException {
        String body = null;
        Long id = null;
        // EntityModelMachineEntity response = api.deviceEntityMachineEntityUsingPATCH(body, id);

        // TODO: test validations
    }
    
    /**
     * deviceEntityMachineEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceEntityMachineEntityUsingPOSTTest() throws ApiException {
        String body = null;
        Long id = null;
        // EntityModelMachineEntity response = api.deviceEntityMachineEntityUsingPOST(body, id);

        // TODO: test validations
    }
    
    /**
     * deviceEntityMachineEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceEntityMachineEntityUsingPUTTest() throws ApiException {
        String body = null;
        Long id = null;
        // EntityModelMachineEntity response = api.deviceEntityMachineEntityUsingPUT(body, id);

        // TODO: test validations
    }
    
    /**
     * findAllByMachineEntityIsNullDeviceEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllByMachineEntityIsNullDeviceEntityUsingGETTest() throws ApiException {
        // CollectionModelDeviceEntity response = api.findAllByMachineEntityIsNullDeviceEntityUsingGET();

        // TODO: test validations
    }
    
    /**
     * findAllDeviceEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllDeviceEntityUsingGETTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        // CollectionModelDeviceEntity response = api.findAllDeviceEntityUsingGET(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * findByIdDeviceEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByIdDeviceEntityUsingGETTest() throws ApiException {
        Long id = null;
        // EntityModelDeviceEntity response = api.findByIdDeviceEntityUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * saveDeviceEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveDeviceEntityUsingPATCHTest() throws ApiException {
        DeviceEntity body = null;
        Long id = null;
        // EntityModelDeviceEntity response = api.saveDeviceEntityUsingPATCH(body, id);

        // TODO: test validations
    }
    
    /**
     * saveDeviceEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveDeviceEntityUsingPOSTTest() throws ApiException {
        DeviceEntity body = null;
        // EntityModelDeviceEntity response = api.saveDeviceEntityUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * saveDeviceEntity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveDeviceEntityUsingPUTTest() throws ApiException {
        DeviceEntity body = null;
        Long id = null;
        // EntityModelDeviceEntity response = api.saveDeviceEntityUsingPUT(body, id);

        // TODO: test validations
    }
    
}
