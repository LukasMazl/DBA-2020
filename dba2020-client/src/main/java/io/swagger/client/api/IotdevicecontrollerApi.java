/**
 * DBA 2020
 * semestral work
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.CreateDeviceResponse;
import io.swagger.client.model.CreateDeviceDTO;
import io.swagger.client.model.DeleteDeviceResponse;
import io.swagger.client.model.AllFreeDeviceDTO;
import io.swagger.client.model.DeviceConfigurationDTO;
import io.swagger.client.model.RecordMachineStateDTO;
import io.swagger.client.model.RecordNewStateResponse;
import io.swagger.client.model.DeviceConfigurationResponse;
import io.swagger.client.model.NewDeviceConfigurationDTO;
import io.swagger.client.model.TakeDeviceDTO;
import io.swagger.client.model.TakeDeviceResponse;
import io.swagger.client.model.UpdateDeviceResponse;
import io.swagger.client.model.UpdateDeviceDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IotdevicecontrollerApi {
    private ApiClient apiClient;

    public IotdevicecontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IotdevicecontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createDeviceUsingPOST */
    private com.squareup.okhttp.Call createDeviceUsingPOSTCall(CreateDeviceDTO createDeviceDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createDeviceDTO;
        
        // verify the required parameter 'createDeviceDTO' is set
        if (createDeviceDTO == null) {
            throw new ApiException("Missing the required parameter 'createDeviceDTO' when calling createDeviceUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/device/create".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * createDevice
     * 
     * @param createDeviceDTO createDeviceDTO (required)
     * @return CreateDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateDeviceResponse createDeviceUsingPOST(CreateDeviceDTO createDeviceDTO) throws ApiException {
        ApiResponse<CreateDeviceResponse> resp = createDeviceUsingPOSTWithHttpInfo(createDeviceDTO);
        return resp.getData();
    }

    /**
     * createDevice
     * 
     * @param createDeviceDTO createDeviceDTO (required)
     * @return ApiResponse&lt;CreateDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateDeviceResponse> createDeviceUsingPOSTWithHttpInfo(CreateDeviceDTO createDeviceDTO) throws ApiException {
        com.squareup.okhttp.Call call = createDeviceUsingPOSTCall(createDeviceDTO, null, null);
        Type localVarReturnType = new TypeToken<CreateDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createDevice (asynchronously)
     * 
     * @param createDeviceDTO createDeviceDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeviceUsingPOSTAsync(CreateDeviceDTO createDeviceDTO, final ApiCallback<CreateDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeviceUsingPOSTCall(createDeviceDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteDeviceUsingPOST */
    private com.squareup.okhttp.Call deleteDeviceUsingPOSTCall(String serialNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling deleteDeviceUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/device/delete/{serialNumber}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serialNumber" + "\\}", apiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * deleteDevice
     * 
     * @param serialNumber serialNumber (required)
     * @return DeleteDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDeviceResponse deleteDeviceUsingPOST(String serialNumber) throws ApiException {
        ApiResponse<DeleteDeviceResponse> resp = deleteDeviceUsingPOSTWithHttpInfo(serialNumber);
        return resp.getData();
    }

    /**
     * deleteDevice
     * 
     * @param serialNumber serialNumber (required)
     * @return ApiResponse&lt;DeleteDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDeviceResponse> deleteDeviceUsingPOSTWithHttpInfo(String serialNumber) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeviceUsingPOSTCall(serialNumber, null, null);
        Type localVarReturnType = new TypeToken<DeleteDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteDevice (asynchronously)
     * 
     * @param serialNumber serialNumber (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceUsingPOSTAsync(String serialNumber, final ApiCallback<DeleteDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeviceUsingPOSTCall(serialNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllFreeDeviceUsingPOST */
    private com.squareup.okhttp.Call getAllFreeDeviceUsingPOSTCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/api/v1/device/allFree".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getAllFreeDevice
     * 
     * @return AllFreeDeviceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllFreeDeviceDTO getAllFreeDeviceUsingPOST() throws ApiException {
        ApiResponse<AllFreeDeviceDTO> resp = getAllFreeDeviceUsingPOSTWithHttpInfo();
        return resp.getData();
    }

    /**
     * getAllFreeDevice
     * 
     * @return ApiResponse&lt;AllFreeDeviceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllFreeDeviceDTO> getAllFreeDeviceUsingPOSTWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllFreeDeviceUsingPOSTCall(null, null);
        Type localVarReturnType = new TypeToken<AllFreeDeviceDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllFreeDevice (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllFreeDeviceUsingPOSTAsync(final ApiCallback<AllFreeDeviceDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllFreeDeviceUsingPOSTCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllFreeDeviceDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDeviceConfigurationUsingPOST */
    private com.squareup.okhttp.Call getDeviceConfigurationUsingPOSTCall(String serialNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling getDeviceConfigurationUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/device/configuration/{serialNumber}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serialNumber" + "\\}", apiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getDeviceConfiguration
     * 
     * @param serialNumber serialNumber (required)
     * @return DeviceConfigurationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceConfigurationDTO getDeviceConfigurationUsingPOST(String serialNumber) throws ApiException {
        ApiResponse<DeviceConfigurationDTO> resp = getDeviceConfigurationUsingPOSTWithHttpInfo(serialNumber);
        return resp.getData();
    }

    /**
     * getDeviceConfiguration
     * 
     * @param serialNumber serialNumber (required)
     * @return ApiResponse&lt;DeviceConfigurationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceConfigurationDTO> getDeviceConfigurationUsingPOSTWithHttpInfo(String serialNumber) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceConfigurationUsingPOSTCall(serialNumber, null, null);
        Type localVarReturnType = new TypeToken<DeviceConfigurationDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getDeviceConfiguration (asynchronously)
     * 
     * @param serialNumber serialNumber (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceConfigurationUsingPOSTAsync(String serialNumber, final ApiCallback<DeviceConfigurationDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceConfigurationUsingPOSTCall(serialNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceConfigurationDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for recordNewStateUsingPOST */
    private com.squareup.okhttp.Call recordNewStateUsingPOSTCall(RecordMachineStateDTO recordMachineStateDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = recordMachineStateDTO;
        
        // verify the required parameter 'recordMachineStateDTO' is set
        if (recordMachineStateDTO == null) {
            throw new ApiException("Missing the required parameter 'recordMachineStateDTO' when calling recordNewStateUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/device/record".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * recordNewState
     * 
     * @param recordMachineStateDTO recordMachineStateDTO (required)
     * @return RecordNewStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RecordNewStateResponse recordNewStateUsingPOST(RecordMachineStateDTO recordMachineStateDTO) throws ApiException {
        ApiResponse<RecordNewStateResponse> resp = recordNewStateUsingPOSTWithHttpInfo(recordMachineStateDTO);
        return resp.getData();
    }

    /**
     * recordNewState
     * 
     * @param recordMachineStateDTO recordMachineStateDTO (required)
     * @return ApiResponse&lt;RecordNewStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RecordNewStateResponse> recordNewStateUsingPOSTWithHttpInfo(RecordMachineStateDTO recordMachineStateDTO) throws ApiException {
        com.squareup.okhttp.Call call = recordNewStateUsingPOSTCall(recordMachineStateDTO, null, null);
        Type localVarReturnType = new TypeToken<RecordNewStateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * recordNewState (asynchronously)
     * 
     * @param recordMachineStateDTO recordMachineStateDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recordNewStateUsingPOSTAsync(RecordMachineStateDTO recordMachineStateDTO, final ApiCallback<RecordNewStateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recordNewStateUsingPOSTCall(recordMachineStateDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RecordNewStateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for setDeviceConfigurationUsingPOST */
    private com.squareup.okhttp.Call setDeviceConfigurationUsingPOSTCall(NewDeviceConfigurationDTO newDeviceConfigurationDTO, String serialNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newDeviceConfigurationDTO;
        
        // verify the required parameter 'newDeviceConfigurationDTO' is set
        if (newDeviceConfigurationDTO == null) {
            throw new ApiException("Missing the required parameter 'newDeviceConfigurationDTO' when calling setDeviceConfigurationUsingPOST(Async)");
        }
        
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling setDeviceConfigurationUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/device/configuration/set/{serialNumber}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serialNumber" + "\\}", apiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * setDeviceConfiguration
     * 
     * @param newDeviceConfigurationDTO newDeviceConfigurationDTO (required)
     * @param serialNumber serialNumber (required)
     * @return DeviceConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceConfigurationResponse setDeviceConfigurationUsingPOST(NewDeviceConfigurationDTO newDeviceConfigurationDTO, String serialNumber) throws ApiException {
        ApiResponse<DeviceConfigurationResponse> resp = setDeviceConfigurationUsingPOSTWithHttpInfo(newDeviceConfigurationDTO, serialNumber);
        return resp.getData();
    }

    /**
     * setDeviceConfiguration
     * 
     * @param newDeviceConfigurationDTO newDeviceConfigurationDTO (required)
     * @param serialNumber serialNumber (required)
     * @return ApiResponse&lt;DeviceConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceConfigurationResponse> setDeviceConfigurationUsingPOSTWithHttpInfo(NewDeviceConfigurationDTO newDeviceConfigurationDTO, String serialNumber) throws ApiException {
        com.squareup.okhttp.Call call = setDeviceConfigurationUsingPOSTCall(newDeviceConfigurationDTO, serialNumber, null, null);
        Type localVarReturnType = new TypeToken<DeviceConfigurationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * setDeviceConfiguration (asynchronously)
     * 
     * @param newDeviceConfigurationDTO newDeviceConfigurationDTO (required)
     * @param serialNumber serialNumber (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDeviceConfigurationUsingPOSTAsync(NewDeviceConfigurationDTO newDeviceConfigurationDTO, String serialNumber, final ApiCallback<DeviceConfigurationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDeviceConfigurationUsingPOSTCall(newDeviceConfigurationDTO, serialNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceConfigurationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for takeDeviceUsingPOST */
    private com.squareup.okhttp.Call takeDeviceUsingPOSTCall(TakeDeviceDTO takeDeviceDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = takeDeviceDTO;
        
        // verify the required parameter 'takeDeviceDTO' is set
        if (takeDeviceDTO == null) {
            throw new ApiException("Missing the required parameter 'takeDeviceDTO' when calling takeDeviceUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/device/setTaken".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * takeDevice
     * 
     * @param takeDeviceDTO takeDeviceDTO (required)
     * @return TakeDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TakeDeviceResponse takeDeviceUsingPOST(TakeDeviceDTO takeDeviceDTO) throws ApiException {
        ApiResponse<TakeDeviceResponse> resp = takeDeviceUsingPOSTWithHttpInfo(takeDeviceDTO);
        return resp.getData();
    }

    /**
     * takeDevice
     * 
     * @param takeDeviceDTO takeDeviceDTO (required)
     * @return ApiResponse&lt;TakeDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TakeDeviceResponse> takeDeviceUsingPOSTWithHttpInfo(TakeDeviceDTO takeDeviceDTO) throws ApiException {
        com.squareup.okhttp.Call call = takeDeviceUsingPOSTCall(takeDeviceDTO, null, null);
        Type localVarReturnType = new TypeToken<TakeDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * takeDevice (asynchronously)
     * 
     * @param takeDeviceDTO takeDeviceDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call takeDeviceUsingPOSTAsync(TakeDeviceDTO takeDeviceDTO, final ApiCallback<TakeDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = takeDeviceUsingPOSTCall(takeDeviceDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TakeDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateDeviceUsingPOST */
    private com.squareup.okhttp.Call updateDeviceUsingPOSTCall(String serialNumber, UpdateDeviceDTO updateDeviceDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateDeviceDTO;
        
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling updateDeviceUsingPOST(Async)");
        }
        
        // verify the required parameter 'updateDeviceDTO' is set
        if (updateDeviceDTO == null) {
            throw new ApiException("Missing the required parameter 'updateDeviceDTO' when calling updateDeviceUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/device/update/{serialNumber}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "serialNumber" + "\\}", apiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * updateDevice
     * 
     * @param serialNumber serialNumber (required)
     * @param updateDeviceDTO updateDeviceDTO (required)
     * @return UpdateDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateDeviceResponse updateDeviceUsingPOST(String serialNumber, UpdateDeviceDTO updateDeviceDTO) throws ApiException {
        ApiResponse<UpdateDeviceResponse> resp = updateDeviceUsingPOSTWithHttpInfo(serialNumber, updateDeviceDTO);
        return resp.getData();
    }

    /**
     * updateDevice
     * 
     * @param serialNumber serialNumber (required)
     * @param updateDeviceDTO updateDeviceDTO (required)
     * @return ApiResponse&lt;UpdateDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateDeviceResponse> updateDeviceUsingPOSTWithHttpInfo(String serialNumber, UpdateDeviceDTO updateDeviceDTO) throws ApiException {
        com.squareup.okhttp.Call call = updateDeviceUsingPOSTCall(serialNumber, updateDeviceDTO, null, null);
        Type localVarReturnType = new TypeToken<UpdateDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateDevice (asynchronously)
     * 
     * @param serialNumber serialNumber (required)
     * @param updateDeviceDTO updateDeviceDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeviceUsingPOSTAsync(String serialNumber, UpdateDeviceDTO updateDeviceDTO, final ApiCallback<UpdateDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeviceUsingPOSTCall(serialNumber, updateDeviceDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
